name: Create GitHub Release

on:
  workflow_dispatch:
    inputs:
      version-name:
        description: 'Version Name - E.g. "2024.11.1"'
        required: true
        type: string
      version-number:
        description: 'Version Number - E.g. "123456"'
        required: true
        type: string
      artifact-run-id:
        description: 'GitHub Action Run ID containing artifacts'
        required: true
        type: string
      draft:
        description: 'Create as draft release'
        type: boolean
        default: true
      prerelease:
        description: 'Mark as pre-release'
        type: boolean
        default: true
      make-latest:
        description: 'Set as the latest release'
        type: boolean
      branch-protection-type:
        description: 'Branch protection type'
        type: choice
        options:
          - Branch Name
          - GitHub API
        default: Branch Name
env:
    ARTIFACTS_PATH: artifacts
jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-24.04
    permissions:
      contents: write

    steps:
      - name: Check out repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Get branch from workflow run
        id: get_release_branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACT_RUN_ID: ${{ inputs.artifact-run-id }}
          BRANCH_PROTECTION_TYPE: ${{ inputs.branch-protection-type }}
        run: |
          workflow_data=$(gh run view $ARTIFACT_RUN_ID --json headBranch,workflowName)
          release_branch=$(echo "$workflow_data" | jq -r .headBranch)
          workflow_name=$(echo "$workflow_data" | jq -r .workflowName)

          case "$BRANCH_PROTECTION_TYPE" in
            "Branch Name")
              if [[ "$release_branch" != "main" && ! "$release_branch" =~ ^release/ ]]; then
                echo "::error::Branch '$release_branch' is not 'main' or a release branch starting with 'release/'. Releases must be created from protected branches."
                exit 1
              fi
              ;;
            "GitHub API")
              #NOTE requires token with "administration:read" scope
              if ! gh api "repos/${{ github.repository }}/branches/$release_branch/protection" | grep -q "required_status_checks"; then
                echo "::error::Branch '$release_branch' is not protected. Releases must be created from protected branches. If that's not correct, confirm if the github token user has the 'administration:read' scope."
                exit 1
              fi
              ;;
            *)
              echo "::error::Unsupported branch protection type: $BRANCH_PROTECTION_TYPE"
              exit 1
              ;;
          esac

          echo "release_branch=$release_branch" >> $GITHUB_OUTPUT
          echo "workflow_name=$workflow_name" >> $GITHUB_OUTPUT

          case "$workflow_name" in
            *"Password Manager"*)
              echo "releasing_bwpm=true" >> $GITHUB_OUTPUT
              echo "app_name=Password Manager" >> $GITHUB_OUTPUT
              ;;
            *"Authenticator"*)
              echo "releasing_bwa=true" >> $GITHUB_OUTPUT
              echo "app_name=Authenticator" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "::error::Unknown app in workflow name: $workflow_name" >> $GITHUB_STEP_SUMMARY
              exit 1
              ;;
          esac

      - name: Download artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACT_RUN_ID: ${{ inputs.artifact-run-id }}
        run: |
          gh run download $ARTIFACT_RUN_ID -D $ARTIFACTS_PATH
          file_count=$(find $ARTIFACTS_PATH -type f | wc -l)
          echo "Downloaded $file_count file(s)."
          if [ "$file_count" -gt 0 ]; then
            echo "Downloaded files:"
            find $ARTIFACTS_PATH -type f
          fi

      - name: Create Release
        id: create_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          _VERSION_NAME: ${{ inputs.version-name }}
          _VERSION_NUMBER: ${{ inputs.version-number }}
          _PRERELEASE: ${{ inputs.prerelease }}
          _DRAFT: ${{ inputs.draft }}
          _MAKE_LATEST: ${{ inputs.make-latest }}
          _TARGET_COMMIT: ${{ steps.get_release_branch.outputs.release_branch }}
          _APP_NAME: ${{ steps.get_release_branch.outputs.app_name }}
        run: |
          echo "⌛️ Creating release for $_APP_NAME $_VERSION_NAME ($_VERSION_NUMBER) on $_TARGET_COMMIT"
          release_url=$(gh release create "v$_VERSION_NAME" \
            --title "$_APP_NAME $_VERSION_NAME ($_VERSION_NUMBER)" \
            --target "$_TARGET_COMMIT" \
            --generate-notes \
            --draft \
            $ARTIFACTS_PATH/*/*)

          echo "✅ Release created: $release_url"

          # Get release info for outputs
          release_data=$(gh release view "v$_VERSION_NAME" --json id)
          release_id=$(echo "$release_data" | jq -r .id)

          echo "id=$release_id" >> $GITHUB_OUTPUT
          echo "url=$release_url" >> $GITHUB_OUTPUT

      - name: Update Release Description
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_ID: ${{ steps.create_release.outputs.id }}
          RELEASE_URL: ${{ steps.create_release.outputs.url }}
          ARTIFACT_RUN_ID: ${{ inputs.artifact-run-id }}
          _VERSION_NAME: ${{ inputs.version-name }}
        run: |
          # Get current release body
          #current_body=$(gh api /repos/${{ github.repository }}/releases/$RELEASE_ID --jq .body)
          echo "Getting current release body. Tag: v$_VERSION_NAME"
          current_body=$(gh release view "v$_VERSION_NAME" --json body --jq .body)

          # Append build source to the end
          updated_body="${current_body}
          **Builds Source:** https://github.com/${{ github.repository }}/actions/runs/$ARTIFACT_RUN_ID"

          # Update release
          # gh api --method PATCH /repos/${{ github.repository }}/releases/$RELEASE_ID \
          #   -f body="$updated_body"

          gh release edit "v$_VERSION_NAME" --notes "$updated_body"

          echo "# :rocket: Release ready at:" >> $GITHUB_STEP_SUMMARY
          echo "$RELEASE_URL" >> $GITHUB_STEP_SUMMARY
